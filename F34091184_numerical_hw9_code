import numpy as np

def power_method(A, tol=1e-10, max_iter=1000):
    n = A.shape[0]
    b_k = np.random.rand(n)
    b_k = b_k / np.linalg.norm(b_k)
    
    for _ in range(max_iter):
        b_k1 = np.dot(A, b_k)
        b_k1_norm = np.linalg.norm(b_k1)
        b_k1 = b_k1 / b_k1_norm
        if np.linalg.norm(b_k1 - b_k) < tol:
            break
        b_k = b_k1
    eigenvalue = np.dot(b_k.T, np.dot(A, b_k)) / np.dot(b_k.T, b_k)
    return eigenvalue, b_k

def deflate(A, eigenvalue, eigenvector):
    v = eigenvector.reshape(-1, 1)
    A_new = A - eigenvalue * (v @ v.T)
    return A_new

A = np.array([[2, 1, 1],
              [1, 2, 1],
              [1, 1, 2]], dtype=float)

eigenvalues = []
eigenvectors = []
A_k = A.copy()
for i in range(A.shape[0]):
    eigval, eigvec = power_method(A_k)
    eigenvalues.append(eigval)
    eigenvectors.append(eigvec)
    A_k = deflate(A_k, eigval, eigvec)

for i, val in enumerate(eigenvalues):
    print(f"\nEigenvalue {i+1}: {val:.2f}")
    print(f"Eigenvector {i+1}: {eigenvectors[i]}")
